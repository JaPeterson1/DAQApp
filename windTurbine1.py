import math

def powerEquation(radius:float, windSpeed:float, airDensity:float, efficiencyFactor:float):
    """Get the number of watts generated by the windTurbine
    Args:
        radius (float): radius of the windTurbine (m)
        windSpeed (float): speed of the wind (m/s)
        airDensity (float): air density (kg/m^3)
        efficiencyFactor (float): (%)
    """
    return (math.pi/2)*(radius**2)*(windSpeed**3)*airDensity*efficiencyFactor

class windTurbine():
    def __init__(self, radius, efficiencyFactor, standardAirDensity):
        """Class to handle estimating wind power.

        Args:
            radius (float): radius of the wind turbine
            efficiencyFactor (float): experimentaly determined efficiency constant.
            standardAirDensity (float): Air density, typically 1.2 kg/m^3.
        """
        self.radius = radius
        self.efficiencyFactor = efficiencyFactor
        self.standardAirDensity = standardAirDensity
    
    def getPower(self, windSpeed, airDensity=-10):
        """Finds the average wind power

        Args:
            windSpeed (float): The current windspeed
            airDensity (int, optional): _description_. Defaults to the standardAirDensity parameter from the constructor

        Returns:
            float: Estimated watt output of the turbine.
        """
        if airDensity==-10: airDensity = self.standardAirDensity
        return powerEquation(self.radius, windSpeed, airDensity, self.efficiencyFactor)